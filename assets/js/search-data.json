{
  
    
        "post0": {
            "title": "Title",
            "content": "import numpy as np import matplotlib.pyplot as plt import torch . class neural_net: def __init__(self,input , y ,nodes_per_layer,activations , print_weights=False): # x shape is (3, 8) # X is # [[ 3 4 3 33 23 53 3 33] # [ 4 1 9 42 44 64 64 34] # [ 2 2 4 2 25 72 2 42]] # y shape is (2, 8) # y is # [[1 0 1 0 0 1 1 1] # [1 1 0 0 1 0 1 0]] n=input.shape[0] d=input.shape[1] #initializing the weights self.input=input self.input_shape=self.input.shape #n[0] x m .....3x8 self.num_samples=self.input.shape[0] # 8 self.nodes_per_layer=nodes_per_layer self.activations=activations self.y=y #n[l] x 1 ............2x8 self.weights=[] self.b=[] layer_weights = torch.empty(self.nodes_per_layer[0]*d).normal_(mean=0,std=0.001).reshape(self.nodes_per_layer[0] , d) layer_bias = torch.empty(self.nodes_per_layer[0]).normal_(mean=0,std=0.001).reshape( self.nodes_per_layer[0] , 1) #10000 x 1 self.weights.append(layer_weights) self.b.append(layer_bias) if print_weights: print( &#39;layer 1 weights shape is&#39;,layer_weights.shape) print( &#39;layer 1 weights is n&#39;,layer_weights) print( &#39;layer 1 bias shape is&#39;,layer_bias.shape) print( &#39;layer 1 bias is&#39;,layer_bias) for i in range(self.nodes_per_layer.shape[0]-1): #[4,3,2] layer_weights = torch.empty(self.nodes_per_layer[i+1]*self.nodes_per_layer[i]).normal_(mean=0,std=0.001).reshape(self.nodes_per_layer[i+1],self.nodes_per_layer[i]) self.weights.append(layer_weights) layer_bias = torch.empty(self.nodes_per_layer[i+1]).normal_(mean=0,std=0.001).reshape( self.nodes_per_layer[i+1] , 1) self.b.append(layer_bias) if print_weights: print( &#39;layer &#39;,str(i+2) ,&#39; weights shape is&#39;,layer_weights.shape) print( &#39;layer &#39;,str(i+2) ,&#39; weights is n&#39;,layer_weights) print( &#39;layer &#39;,str(i+2) ,&#39; bias shape is&#39;,layer_bias.shape) print( &#39;layer &#39;,str(i+2) ,&#39; bias is n&#39;,layer_bias) def forward_propagation(self , input): # print(&#39;forward propadation&#39;) self.a=[] #[4,1],[3,1],[2,1] z=torch.mm(self.weights[0] , input.t()) + self.b[0] self.layer_output =self.Activation(z,self.activations[0]) self.a.append(self.layer_output) for i in range(1,self.nodes_per_layer.shape[0]): #[4,3,2] z=torch.mm(self.weights[i] , self.layer_output) + self.b[i] self.layer_output=self.Activation(z,self.activations[i]) self.a.append(self.layer_output) # print(&#39;layer &#39; , str(i+1) ,&#39; output n&#39;,self.layer_output) # print(&#39;a= n&#39;,self.a) return self.a[-1] def back_propagation(self ,lr=0.01): self.dz=self.a.copy() self.dw=self.weights.copy() self.db=self.b.copy() self.dz[-1]=2 * (self.a[-1].t() - self.y) * self.Activation_derivative(self.a[-1].t() , activation=self.activations[-1]) self.dw[-1]=torch.mm(self.dz[-1].t() , self.a[-2].t()) * (1/self.num_samples) self.db[-1]=torch.sum(self.dz[-1].t(),axis=1,keepdims=True) * (1/self.num_samples) for i in range(-(self.nodes_per_layer.shape[0]-2),1): #[4,3,2] i=-i #1,0 self.dz[i]=torch.mm(self.dz[i+1] , self.weights[i+1] ) * self.Activation_derivative(self.a[i].t() , activation=self.activations[i]) self.db[i]=torch.sum(self.dz[i].t(),axis=1,keepdims=True) * (1/self.num_samples) if(i!=0): self.dw[i]=torch.mm(self.dz[i].t() , self.a[i-1].t()) * (1/self.num_samples) elif(i==0): self.dw[i]=torch.mm(self.dz[i].t() , self.input) * (1/self.num_samples) self.gradient_discent(self.weights,self.dw,self.b,self.db,lr=lr) def gradient_discent(self,w,dw,b,db,lr): for i in range(len (self.weights)): self.weights[i]=w[i]-lr * dw[i] self.b[i]=self.b[i]-lr * db[i] def train(self,epochs , lr=0.01 , verbose=True): self.loss=[] for i in range(epochs): if verbose: print (&#39;epoch &#39;,str(i+1) ,&#39;/&#39;,epochs) self.forward_propagation(self.input) self.loss.append(torch.mean ( self.l2_loss( self.y , self.a[-1].t() ) ) ) self.back_propagation(lr=lr) if verbose : print(&#39;loss= &#39;,self.loss[i]) if verbose : print(&#39;-&#39;*10) plt.plot(self.loss) plt.ylabel(&#39;loss&#39;) plt.show() # self.accuracy(self.a[-1] , self.y) return self.loss, self.a[-1] def sigmoid(self,z): s= 1/(1 + np.exp(-z)) return s def Relu(self,z): return np.maximum(0,z) def tanh(self,z): return (np.exp(z) - np.exp(-z))/(np.exp(z) + np.exp(-z)) def softmax(self,y): exps = np.exp(y) return exps / np.sum(exps) def Activation(self,z,method=&#39;sigmoid&#39;): if (method==&#39;sigmoid&#39;): return self.sigmoid(z) elif(method==&#39;tanh&#39;): return self.tanh(z) elif (method==&#39;Relu&#39;): return self.Relu(z) elif method==None: return z else : return z def predict(self , input): z=torch.mm(self.weights[0] , input.t()) + self.b[0] layer_output =self.Activation(z,self.activations[0]) for i in range(1,self.nodes_per_layer.shape[0]): #[4,3,2] z=torch.mm(self.weights[i] , layer_output) + self.b[i] layer_output=self.Activation(z,self.activations[i]) return layer_output def Activation_derivative(self,a,activation=&#39;sigmoid&#39;): if (activation==&#39;sigmoid&#39;): return a * (1-a) elif (activation==&#39;tanh&#39;): return 1-a**2 elif (activation==&#39;Relu&#39;): return np.minimum(-np.maximum(0,z),1) def l2_loss(self , y_pred , y): # return torch.sum(torch.pow(y - y_pred ,2) , axis=1 ) #nx1 return torch.norm(y-y_pred , dim=1)**2 def cross_entropy_loss(self,a, y): return - np.mean( np.multiply(y, np.log(a)) + np.multiply((1-y), np.log(1-a))) def accuracy(self , a , Y): correct=0 for i in range(Y.shape[0]) : if torch.argmax( a.t() , axis=1 )[i]==torch.argmax( Y , axis=1 )[i]: correct+=1 acc=(correct / Y.shape[0]) * 100 print(&#39;accuracy = &#39;, acc , &#39;%&#39;) . Loading mnist dataset from keras.datasets . Download MNIST dataset . import tensorflow as tf mnist = tf.keras.datasets.mnist (x_train, y_train),(x_test, y_test) = mnist.load_data() x_train, x_test = x_train.astype(&#39;float32&#39;) / 255.0, x_test.astype(&#39;float32&#39;) / 255.0 . Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz 11493376/11490434 [==============================] - 0s 0us/step 11501568/11490434 [==============================] - 0s 0us/step . x_train.shape , y_train.shape , x_test.shape , y_test.shape . ((60000, 28, 28), (60000,), (10000, 28, 28), (10000,)) . preprocessing the data . Convert each image to a vector of lenght 28x28 and each label to a one-hot vector. . from tensorflow.keras.utils import to_categorical . x_train = x_train.reshape(-1 , 28*28) x_test = x_test.reshape(-1 , 28*28) y_train = to_categorical(y_train) y_test = to_categorical(y_test) x_train = torch.from_numpy(x_train) x_test = torch.from_numpy(x_test) y_train = torch.from_numpy(y_train) y_test = torch.from_numpy(y_test) . Creating the model . Let&#39;s create a model with two layers. The first layer has 128 neurons and the second one has 10 neurons (number of MNISt classes). We will use tanh for the first layer and sigmoid for the second one. . nn=neural_net(x_train , y_train ,nodes_per_layer = np.array([128,10]) , activations=np.array([&#39;tanh&#39;,&#39;sigmoid&#39;]) ) # (self,input,nodes_per_layer,activations,y): . Training the model . loss , y_pred = nn.train(epochs=1000 ,lr=0.1,verbose=False) . Prediction for the test data . y_pred = nn.predict( x_test ) nn.accuracy(y_pred,y_test) . train accuracy = 84.59 % .",
            "url": "https://amro-kamal.github.io/amro/2021/09/08/Neural_network_class_from_scratch-(1).html",
            "relUrl": "/2021/09/08/Neural_network_class_from_scratch-(1).html",
            "date": " • Sep 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://amro-kamal.github.io/amro/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://amro-kamal.github.io/amro/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Wellcome to my website!. . I Amro, a student at the African Master’s in Machine Intelligence (AMMI), a one-year program organized by the African Institute For Mathematical Sciences (AIMS). . Welcome to my website, see what I am doing: . Sep 2021: I started my MSc project with Dr. Stephane Deny from Facebook AI reseach. . | Sep 2021: I started a project at OmdenaAI as a junior ML engineer. | | Jan 2021: I moved to Senegal to start the African Master’s in Machine Intelligence (AMMI). . | Oct 2020: I completed my BSc at University of Khartoum / Electrical Engineering (minor in software engineering). Now I am an Engineer 😄. . | Sep 2019: I presented a session “Intro to Deep Learning” at Deep Learning IndabaX Sudan. . | Aug 2019: I attened Deep Learning Indaba 2019 in Nairobi, Kenya. | . My Medium Blogs: . Resiual Blocks and ResNets. | YOLO, YOLOv2 and YOLOv3: All You want to know. | . Contacts . Email , LinkedIn , Twitter .",
          "url": "https://amro-kamal.github.io/amro/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://amro-kamal.github.io/amro/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}